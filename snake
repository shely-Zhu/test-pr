<template>
  <div class="game-container">
    <canvas ref="gameCanvas" width="400" height="400"></canvas>
  </div>
</template>

<script lang="ts">
import { defineComponent, onMounted, ref } from 'vue';

interface Point {
  x: number;
  y: number;
}

export default defineComponent({
  name: 'SnakeGame',
  setup() {
    const gameCanvas = ref<HTMLCanvasElement | null>(null);
    const ctx = ref<CanvasRenderingContext2D | null>(null);

    const snake: Point[] = [{ x: 10, y: 10 }];
    let direction: Point = { x: 0, y: 0 };
    let food: Point = { x: 15, y: 15 };
    const gridSize = 20;

    const gameLoop = () => {
      if (!ctx.value) return;

      // Move snake
      const head = { x: snake[0].x + direction.x, y: snake[0].y + direction.y };
      snake.unshift(head);
      if (head.x === food.x && head.y === food.y) {
        placeFood();
      } else {
        snake.pop();
      }

      // Check for collisions
      if (
        head.x < 0 ||
        head.x >= gameCanvas.value!.width / gridSize ||
        head.y < 0 ||
        head.y >= gameCanvas.value!.height / gridSize ||
        snake.slice(1).some(segment => segment.x === head.x && segment.y === head.y)
      ) {
        resetGame();
      }

      // Draw everything
      ctx.value.fillStyle = 'black';
      ctx.value.fillRect(0, 0, gameCanvas.value!.width, gameCanvas.value!.height);
      ctx.value.fillStyle = 'lime';
      snake.forEach(segment => {
        ctx.value!.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize - 2, gridSize - 2);
      });
      ctx.value.fillStyle = 'red';
      ctx.value.fillRect(food.x * gridSize, food.y * gridSize, gridSize - 2, gridSize - 2);
    };

    const placeFood = () => {
      food = {
        x: Math.floor(Math.random() * (gameCanvas.value!.width / gridSize)),
        y: Math.floor(Math.random() * (gameCanvas.value!.height / gridSize))
      };
    };

    const resetGame = () => {
      snake.splice(0, snake.length, { x: 10, y: 10 });
      direction = { x: 0, y: 0 };
      placeFood();
    };

    const handleKeydown = (e: KeyboardEvent) => {
      switch (e.key) {
        case 'ArrowUp':
          if (direction.y === 0) direction = { x: 0, y: -1 };
          break;
        case 'ArrowDown':
          if (direction.y === 0) direction = { x: 0, y: 1 };
          break;
        case 'ArrowLeft':
          if (direction.x === 0) direction = { x: -1, y: 0 };
          break;
        case 'ArrowRight':
          if (direction.x === 0) direction = { x: 1, y: 0 };
          break;
      }
    };

    onMounted(() => {
      if (gameCanvas.value) {
        ctx.value = gameCanvas.value.getContext('2d');
        resetGame();
        setInterval(gameLoop, 100);
        window.addEventListener('keydown', handleKeydown);
      }
    });

    return {
      gameCanvas
    };
  }
});
</script>

<style scoped>
.game-container {
  display: flex;
  justify-content: center;
  align-items: center;
}
canvas {
  border: 1px solid #000;
}
</style>
